{
  "hash": "b9c5551245417a3d630de726a24103b3",
  "result": {
    "markdown": "# Report Formatting {#sec-rformat}\n\n\n```{mermaid}\nflowchart LR\nFig[Figures] --> Lay[Layout<br>Size]\nTab[HTML Tables]\nPlace[Placement] --> places[Margin<br>Tabs<br>Expand/Hide]\nrept[reptools] --> rhf[Report Writing<br>Helper Functions]\nOF[Overall Format] --> ofs[HTML]\nOF --> ltx[LaTeX] --> pdf[pdf]\nOF --> mfd[Multi-Format<br>Reports]\nMD[Metadata<br>Report<br>Annotations] --> mds[Variable Labels<br>and Units]\n```\n\n\nA state-of-the-art way to make reproducible reports is to use a statistical computing language such as R and its [`knitr`](https://cran.r-project.org/web/packages/knitr) package in conjunction with either [`RMarkdown`](https://rmarkdown.rstudio.com) or [`Quarto`](https://quarto.org), with the latter likely to replace the former.  Both of the report-making systems allow one to produce reports in a variety of formats including html, pdf, and Word.  Html is recommended because pages can be automatically resized to allow optimum viewing on devices of most sizes, and because html allows for interactive graphics and other interactive components.  Pdf is produced by converting `RMarkdown` or `Quarto`-produced markdown elements to $\\LaTeX$.[Report formatting is very much enhanced by using variable attributes such as labels and units of measurement that are not considered in base R.  Methods for better annotating output using labels and units are given below.]{.aside}\n\nThis document can serve as a template for using R with `Quarto`; one can see the raw script by clicking on `Code` at the top right of the report.  When one has only one output format target, things are fairly straightforward except some situations where mixed formats are rendered in the same code *chunk*. Click below for details.\n\n::: {.callout-note collapse=\"true\"}\n# Notes on Printing Mixed Output in Chunks\n\nTo make use of specialized functions that produce html or $\\LaTeX$ markup, one often has to put `results='asis'` in the code chunk header to keep the system from disturbing the generated html or $\\LaTeX$ markup so that it will be typeset correctly in the final document.  This process works smoothly but creates one complication: if you print an object that produces plain text in the same code chunk, the system will try to typeset it in html or $\\LaTeX$.  To prevent this from happening you either need to split the chunks into multiple chunks (some with `results='asis'` and some not) or you need to make it clear that parts of the output are to be typeset verbatim.  To do that a simple function `pr` can sense if `results='asis'` is in effect for the current chunk.  If so, the object is surrounded by the `markdown` verbatim indicator---three consecutive back ticks.  If not the object is left alone.  `pr` is defined in the `marksupSpecs$markdown$pr` object, so you can bring it to your session by copying into a local function `pr` as shown below, which has a chunk option `results='asis'` to show that verbatim output appears anyway.  If the argument `obj` to `pr` is a data frame or data table, variables will be rounded to the value given in the argument `dec` (default `dec=3`) before printing.  If you specify `inline=x` the object `x` is printed with `cat()` instead of `print()`.  `inline` is more for printing character strings.\n\nAn example of something that may not render correctly due to `results='asis'` being in the chunk header (needed for `html(...)`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(prType='html')\nf <- ols(y ~ rcs(x1, 5))\nf    # prints model summary in html format\nm <- matrix((1:10)/3, ncol=2)\nm\n# use pr(obj=m) to fix\n```\n:::\n\n\nHere are examples of `pr` usage.\n\n\n\n```{.r .cell-code}\nrequire(Hmisc)\npr <- markupSpecs$markdown$pr\nx <- (1:5)/7\npr('x:', x)\n```\n\n```\n\nx: \n\n[1] 0.1428571 0.2857143 0.4285714 0.5714286 0.7142857\n```\n\n```{.r .cell-code}\npr(obj=x)\n```\n\n```\n[1] 0.1428571 0.2857143 0.4285714 0.5714286 0.7142857\n```\n\n```{.r .cell-code}\npr(inline=paste(round(x,3), collapse=', '))\n```\n\n```\n\n0.143, 0.286, 0.429, 0.571, 0.714\n\n```\n\n\nInstead of working to keep certain outputs verbatim you can use `knitr::kable()` to convert verbatim output to markdown.\n\n:::\n\n`knitr/Quarto` will by default print data frames and other simple tables using html.  To make `knitr` using plain text printing, put this code at the top of the report to redefine the default `knitr` printing function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknit_print <- knitr::normal_print\n```\n:::\n\n\n## `Quarto` Syntax for Figures\n\nOne can specify sizes, layouts, captions, and more using `Quarto` markup.  Captions are ignored unless a figure is given a label.  Figure labels must begin with `fig-`.  The figure can be cross-referenced elsewhere in the document using for example `See \\@fig-scatterplot`.  `Figure` will be placed in front of the figure number automatically.  Here is example syntax.\n\n| ```{r}\n| #| label: fig-myplot\n| #| fig-cap: \"An example caption (use one long line for caption)\"\n| #| fig-height: 3\n| #| fig-width: 4\n| plot(1:7, abs(-3 : 3))\n| ```\n\nIf the code produces multiple plots you can combine them into one with a single overall caption and include subcaptions for the individual panels:\n\n| ```{r}\n| #| label: fig-myplot\n| #| fig-cap: \"Overall caption ...\"\n| #| fig-height: 3\n| #| fig-width: 4\n| #| layout-ncol: 2\n| #| fig-subcap:\n| #|   - \"Subcaption for panel (a)\"\n| #|   - \"Subcaption for panel (b)\"\n| plot(1:7, abs(-3 : 3))\n| hist(x)\n| ```\n\nTo include an existing image while making use of `Quarto` for sizing and captioning etc. use this example.\n\n| ```{r out.width=\"600px\"}\n| #| label: fig-mylabel\n| #| fig-cap: \"...\"\n| knitr::include_graphics('my.png')\n| ```\n\nIf you don't need to caption or cross-reference the figure use e.g.\n\n| <src image=\"my.png\" width=80%>\n\nOther examples are in the next section.\n\nThe `reptools` repository has helper functions for building a table of figures.  To use those, put `addCap()` or `addCap(scap=\"short caption for figure\")` as the first line of code in the chunk.  The full caption is taken as the `fig-cap:` markup.  If you don't specify `scap` too `addCap` the short caption will be taken as the `fig-scap:` markup, or if that is missing, the full caption.  At the end of the report you can print the table of figures using the following syntax (but surround the last line with back ticks).\n\n| # Figures\n|\n| r printCap()\n\nFor chunks having `#| label: fig-` you can automatically have `knitr` call `addCap` at the start of a chunk, extracting the needed information, if you run the `reptools` function `hookaddcap()` in a chunk before the first chunk that produced a graph.  This procedure is used through this book.  `addCap` makes use of `fig-scap:` for short captions.\n\n\n## `Quarto` Built-in Syntax for Enhancing R Output\n\nHelper functions described below allow one to enhance graphical and tabular R output by taking advantage of `Quarto` formatting features.  These functions allow one to produce different formats within one code chunk, e.g., a plot in the margin and a table in a collapsible note appearing after the code chunk.  But if you need only one output format within a chunk you can make use of built-in syntax as described [here](https://quarto.org/docs/authoring/article-layout.html).  The `yaml`-like syntax also allows you to specify heights and widths for figures, plus multi-figure layouts.\n\nHere is some example code with all the markup shown.\n\n| ```{r}\n| #| column: margin\n| #| fig-height: 1\n| #| fig-width: 3\n| par(mar=c(2, 2, 0, 0), mgp=c(2, .5, 0))\n| set.seed(1)\n| x <- rnorm(1000)\n| hist(x, nclass=40, main='')\n| x[1:3]               # ordinary output stays put\n| knitr::kable(x[1:3]) # html output put in margin\n| hist(x, main='')\n| ```\n\nThis results follow.\n\n\n::: {.cell .column-margin}\n\n```{.r .cell-code}\npar(mar=c(2, 2, 0, 0), mgp=c(2, .5, 0))\nset.seed(1)\nx <- rnorm(1000)\nhist(x, nclass=40, main='')\n```\n\n::: {.cell-output-display}\n![](rformat_files/figure-html/unnamed-chunk-5-1.png){width=288}\n:::\n\n```{.r .cell-code}\nx[1:3]               # ordinary output stays put\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.6264538  0.1836433 -0.8356286\n```\n:::\n\n```{.r .cell-code}\nknitr::kable(x[1:3]) # html output put in margin\n```\n\n::: {.cell-output-display}\n|          x|\n|----------:|\n| -0.6264538|\n|  0.1836433|\n| -0.8356286|\n:::\n\n```{.r .cell-code}\nhist(x, main='')\n```\n\n::: {.cell-output-display}\n![](rformat_files/figure-html/unnamed-chunk-5-2.png){width=288}\n:::\n:::\n\n\nHere are a few markups for figure layout inside R chunks.\n\nWide page (takes over the margins) and put multiple plots in 1 row:\n\n| #| column: screen-inset\n| #| layout-nrow: 1\n\nWhen plotting 3 figures put the first 2 in one row and the third in the second row and make it wide.\n\n| #| layout: [[1,1], [1]]\n\nMake the top left panel be wider than the top right one.\n\n| #| layout: [[70,30], [100]]\n\nTop left and top right panels have equal widths but devote 0.1 of the total width to an empty region between the two top panels.\n\n| #| layout: [[45, -10, 45], [100]]\n\nSee [here](https://quarto.org/docs/authoring/figures.html) for details about figure specifications inside code chunks.\n\n## `Quarto` Report Writing Helper Functions\n\nHelper functions are defined when you run the `Hmisc` function `getRs` to retrieve them from [`Github`](https://github.com/harrelfe/rscripts/blob/master/reptools.r), i.e., `getRs('reptools.r')`.  You can get help on these functions by running `rsHelp(functionname)`.  Several of the functions construct `Quarto` _callouts_ which are fenced-off sections of markup that trigger special formatting, especially when producing html.  The special formatting includes collapsible sections and marginal notes.  Here is a summary of some of the `reptools` helper functions.\n\n| Function | Purpose |\n|------|---------|\n|`dataChk`    |run a series of logical expressions for checking data consistency, put results in separate tabs using `maketabs`, and optionally create two summary tabs|\n|`dataOverview`|runs a data overview report|\n|`missChk`    |creates a series of analyses of the extent and patterns of missing values in a data table or data frame, and puts graphical summaries in tabs|\n|`hookaddcap` |makes `knitr` automatically extract figure labels, captions, short captions for use in list of figures|\n|`htmlList`   |print a named `list` using the names as headers|\n|`kabl`       |front-end to `knitr::kable` and `kables`.  If you run `kabl` on more than one object it will automatically call `kables`. |\n|`makecallout`|generic Quarto callout maker used by `makecnote`, `makecolmarg`|\n|`makecnote`  |print objects or run code and place output in an initially collapsed callout note|\n|`makecolmarg`|print objects or run code and place output in a marginal note|\n|`maketabs`   |print objects or run code placing output in separate tabs|\n|`makemermaid`|makes a `mermaid` diagram with R variable values included in the diagram|\n|`varType`    |classify variables in a data table/frame or a vector as continuous, discrete, or non-numeric non-discrete|\n|`conVars`    |use `varType` to extract list of continuous variables|\n|`disVars`    |use `varType` to extract list of discrete variables|\n|`vClus`      |run `Hmisc::varclus` on a dataset after reducing it|\n\nThe input to `maketabs`, as will be demonstrated later, may be a named `list`, or more commonly, a series of formulas whose right-hand sides are executed and the result of each formula is placed in a separate tab.  The left side of the formula becomes the tab label.  For `makecolmarg` there should be no left side of the formula as marginal notes are not labeled.  For the named `list` option the `list` names become the tab names.  Examples of both approaches appear later in this report.  In formulas, a left side label must be enclosed in back ticks and not quotes if it is a multi-word string.  A `wide` argument is used to expand the width of the output outside the usual margins.  An `initblank` argument creates a first tab that is empty.  This allows one to show nothing until one of the other tabs is clicked. Alternately you can specify as the first formula \\` \\` ~ \\` \\`.\n\nThe two approaches to using `maketabs` also apply to `makecnote` and `makecolmarg`.  Examples of the \"print an object and place it inside a callout\" are given later in the report for `makecnote` and `makecolmarg`.  Here is an example of the more general formula method that can render any object, including html widgets as produced by `plotly` graphics.  An interactive `plotly` graphic appears at the bottom of the plots in the right margin.  You can single click on elements in the legend to turn them off and on, and double click within the legend to restore to default values.\n\n\n\n```{.r .cell-code}\nrequire(Hmisc)\noptions(plotlyauto=TRUE)  # makes Hmisc use plotly's auto size option\n                          # rather than computing height, width\ngetRs('reptools.r', put='source')\nset.seed(1)\nx <- round(rnorm(100, 100, 15))\nmakecolmarg(~ table(x) + raw + hist(x) + plot(ecdf(x)) + histboxp(x=x))\n```\n\n\n::: {.column-margin}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nx\n 67  70  73  77  78  79  81  82  83  84  86  87  88  89  90  91  92  93  94  95 \n  1   1   1   1   1   1   2   1   1   1   1   1   1   3   1   6   1   3   3   2 \n 96  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 116 117 \n  1   6   5   3   2   1   2   2   4   5   2   2   6   2   3   3   1   2   1   3 \n118 120 121 122 123 124 130 133 136 \n  2   1   1   1   1   2   1   1   1 \n```\n:::\n\n::: {.cell-output-display}\n![](rformat_files/figure-html/chnk1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](rformat_files/figure-html/chnk1-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-7bf94cd961c11210a1ca\" style=\"width:100%;height:464px;\" class=\"plotly html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7bf94cd961c11210a1ca\">{\"x\":{\"visdat\":{\"19f84591379d9\":[\"function () \",\"plotlyVisDat\"],\"19f843b2b6c2b\":[\"function () \",\"data\"],\"19f84500ab69e\":[\"function () \",\"data\"],\"19f84f44eb65\":[\"function () \",\"data\"],\"19f84f018e26\":[\"function () \",\"data\"],\"19f84375c5d9a\":[\"function () \",\"data\"],\"19f841a8b47f9\":[\"function () \",\"data\"]},\"cur_data\":\"19f841a8b47f9\",\"attrs\":{\"19f843b2b6c2b\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"text\":{},\"hoverinfo\":\"text\",\"color\":[\"black\"],\"name\":\"Histogram\",\"legendgroup\":\"Histogram\",\"showlegend\":true,\"inherit\":true},\"19f84500ab69e\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"markers\",\"color\":[\"black\"],\"text\":{},\"hoverinfo\":\"text\",\"size\":[5],\"name\":\"Mean\",\"legendgroup\":\"Mean\",\"showlegend\":true,\"inherit\":true},\"19f84f44eb65\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"text\":{},\"hoverinfo\":\"text\",\"name\":\"Median\",\"legendgroup\":\"Median\",\"showlegend\":true,\"color\":[\"black\"],\"line\":{\"width\":3},\"inherit\":true},\"19f84f018e26\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"text\":{},\"hoverinfo\":\"text\",\"name\":\"Quartiles\",\"legendgroup\":\"Quartiles\",\"showlegend\":true,\"color\":[\"blue\"],\"line\":{\"width\":2},\"inherit\":true},\"19f84375c5d9a\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"text\":{},\"hoverinfo\":\"text\",\"name\":\"0.05, 0.95<br>Quantiles\",\"legendgroup\":\"0.05, 0.95<br>Quantiles\",\"showlegend\":true,\"color\":[\"red\"],\"line\":{\"width\":2},\"inherit\":true},\"19f84375c5d9a.1\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"hoverinfo\":\"none\",\"showlegend\":false,\"alpha\":0.3,\"color\":[\"red\"],\"legendgroup\":\"0.05, 0.95<br>Quantiles\",\"name\":\"ignored\",\"inherit\":true},\"19f84375c5d9a.2\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"hoverinfo\":\"none\",\"showlegend\":false,\"alpha\":0.3,\"color\":[\"blue\"],\"legendgroup\":\"Quartiles\",\"name\":\"ignored\",\"inherit\":true},\"19f84375c5d9a.3\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"hoverinfo\":\"none\",\"showlegend\":false,\"alpha\":0.3,\"color\":[\"red\"],\"legendgroup\":\"0.05, 0.95<br>Quantiles\",\"name\":\"ignored\",\"inherit\":true},\"19f841a8b47f9\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"xend\":{},\"yend\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"text\":{},\"hoverinfo\":\"text\",\"color\":[\"light gray\"],\"name\":\"Gini <span style=\\\"text-decoration: overline\\\">|Δ|<\\/span>\",\"legendgroup\":\"Gini <span style=\\\"text-decoration: overline\\\">|Δ|<\\/span>\",\"visible\":\"legendonly\",\"showlegend\":true,\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":70,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"x\",\"zeroline\":false},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"tickvals\":[-1],\"ticktext\":[\"1\"]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[67,67,null,70,70,null,73,73,null,77,77,null,78,78,null,79,79,null,81,81,null,82,82,null,83,83,null,84,84,null,86,86,null,87,87,null,88,88,null,89,89,null,90,90,null,91,91,null,92,92,null,93,93,null,94,94,null,95,95,null,96,96,null,98,98,null,99,99,null,100,100,null,101,101,null,102,102,null,103,103,null,104,104,null,105,105,null,106,106,null,107,107,null,108,108,null,109,109,null,110,110,null,111,111,null,112,112,null,113,113,null,114,114,null,116,116,null,117,117,null,118,118,null,120,120,null,121,121,null,122,122,null,123,123,null,124,124,null,130,130,null,133,133,null,136,136],\"y\":[-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.8,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.7,null,-1,-0.9,null,-1,-0.4,null,-1,-0.9,null,-1,-0.7,null,-1,-0.7,null,-1,-0.8,null,-1,-0.9,null,-1,-0.4,null,-1,-0.5,null,-1,-0.7,null,-1,-0.8,null,-1,-0.9,null,-1,-0.8,null,-1,-0.8,null,-1,-0.6,null,-1,-0.5,null,-1,-0.8,null,-1,-0.8,null,-1,-0.4,null,-1,-0.8,null,-1,-0.7,null,-1,-0.7,null,-1,-0.9,null,-1,-0.8,null,-1,-0.9,null,-1,-0.7,null,-1,-0.8,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9,null,-1,-0.8,null,-1,-0.9,null,-1,-0.9,null,-1,-0.9],\"type\":\"scatter\",\"mode\":\"lines\",\"text\":[\"67<br>0.01<br>n=1\",\"67<br>0.01<br>n=1\",null,\"70<br>0.01<br>n=1\",\"70<br>0.01<br>n=1\",null,\"73<br>0.01<br>n=1\",\"73<br>0.01<br>n=1\",null,\"77<br>0.01<br>n=1\",\"77<br>0.01<br>n=1\",null,\"78<br>0.01<br>n=1\",\"78<br>0.01<br>n=1\",null,\"79<br>0.01<br>n=1\",\"79<br>0.01<br>n=1\",null,\"81<br>0.02<br>n=2\",\"81<br>0.02<br>n=2\",null,\"82<br>0.01<br>n=1\",\"82<br>0.01<br>n=1\",null,\"83<br>0.01<br>n=1\",\"83<br>0.01<br>n=1\",null,\"84<br>0.01<br>n=1\",\"84<br>0.01<br>n=1\",null,\"86<br>0.01<br>n=1\",\"86<br>0.01<br>n=1\",null,\"87<br>0.01<br>n=1\",\"87<br>0.01<br>n=1\",null,\"88<br>0.01<br>n=1\",\"88<br>0.01<br>n=1\",null,\"89<br>0.03<br>n=3\",\"89<br>0.03<br>n=3\",null,\"90<br>0.01<br>n=1\",\"90<br>0.01<br>n=1\",null,\"91<br>0.06<br>n=6\",\"91<br>0.06<br>n=6\",null,\"92<br>0.01<br>n=1\",\"92<br>0.01<br>n=1\",null,\"93<br>0.03<br>n=3\",\"93<br>0.03<br>n=3\",null,\"94<br>0.03<br>n=3\",\"94<br>0.03<br>n=3\",null,\"95<br>0.02<br>n=2\",\"95<br>0.02<br>n=2\",null,\"96<br>0.01<br>n=1\",\"96<br>0.01<br>n=1\",null,\"98<br>0.06<br>n=6\",\"98<br>0.06<br>n=6\",null,\"99<br>0.05<br>n=5\",\"99<br>0.05<br>n=5\",null,\"100<br>0.03<br>n=3\",\"100<br>0.03<br>n=3\",null,\"101<br>0.02<br>n=2\",\"101<br>0.02<br>n=2\",null,\"102<br>0.01<br>n=1\",\"102<br>0.01<br>n=1\",null,\"103<br>0.02<br>n=2\",\"103<br>0.02<br>n=2\",null,\"104<br>0.02<br>n=2\",\"104<br>0.02<br>n=2\",null,\"105<br>0.04<br>n=4\",\"105<br>0.04<br>n=4\",null,\"106<br>0.05<br>n=5\",\"106<br>0.05<br>n=5\",null,\"107<br>0.02<br>n=2\",\"107<br>0.02<br>n=2\",null,\"108<br>0.02<br>n=2\",\"108<br>0.02<br>n=2\",null,\"109<br>0.06<br>n=6\",\"109<br>0.06<br>n=6\",null,\"110<br>0.02<br>n=2\",\"110<br>0.02<br>n=2\",null,\"111<br>0.03<br>n=3\",\"111<br>0.03<br>n=3\",null,\"112<br>0.03<br>n=3\",\"112<br>0.03<br>n=3\",null,\"113<br>0.01<br>n=1\",\"113<br>0.01<br>n=1\",null,\"114<br>0.02<br>n=2\",\"114<br>0.02<br>n=2\",null,\"116<br>0.01<br>n=1\",\"116<br>0.01<br>n=1\",null,\"117<br>0.03<br>n=3\",\"117<br>0.03<br>n=3\",null,\"118<br>0.02<br>n=2\",\"118<br>0.02<br>n=2\",null,\"120<br>0.01<br>n=1\",\"120<br>0.01<br>n=1\",null,\"121<br>0.01<br>n=1\",\"121<br>0.01<br>n=1\",null,\"122<br>0.01<br>n=1\",\"122<br>0.01<br>n=1\",null,\"123<br>0.01<br>n=1\",\"123<br>0.01<br>n=1\",null,\"124<br>0.02<br>n=2\",\"124<br>0.02<br>n=2\",null,\"130<br>0.01<br>n=1\",\"130<br>0.01<br>n=1\",null,\"133<br>0.01<br>n=1\",\"133<br>0.01<br>n=1\",null,\"136<br>0.01<br>n=1\",\"136<br>0.01<br>n=1\"],\"hoverinfo\":[\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\",null,\"text\",\"text\"],\"name\":\"Histogram\",\"legendgroup\":\"Histogram\",\"showlegend\":true,\"marker\":{\"color\":\"rgba(0,0,0,1)\",\"line\":{\"color\":\"rgba(0,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,0,1)\"},\"error_y\":{\"color\":\"rgba(0,0,0,1)\"},\"error_x\":{\"color\":\"rgba(0,0,0,1)\"},\"line\":{\"color\":\"rgba(0,0,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[101.59],\"y\":[-1.225],\"type\":\"scatter\",\"mode\":\"markers\",\"text\":\"Mean:101.59<br>n=100<br>0 missing\",\"hoverinfo\":\"text\",\"name\":\"Mean\",\"legendgroup\":\"Mean\",\"showlegend\":true,\"marker\":{\"color\":\"rgba(0,0,0,1)\",\"size\":[5],\"sizemode\":\"area\",\"line\":{\"color\":\"rgba(0,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,0,1)\",\"size\":5},\"error_y\":{\"color\":\"rgba(0,0,0,1)\",\"width\":5},\"error_x\":{\"color\":\"rgba(0,0,0,1)\",\"width\":5},\"line\":{\"color\":\"rgba(0,0,0,1)\",\"width\":5},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[101.5,101.5],\"y\":[-1.4,-1.05],\"type\":\"scatter\",\"mode\":\"lines\",\"text\":[\"Q<sub>0.5<\\/sub>:101.5\",\"Q<sub>0.5<\\/sub>:101.5\"],\"hoverinfo\":[\"text\",\"text\"],\"name\":\"Median\",\"legendgroup\":\"Median\",\"showlegend\":true,\"line\":{\"color\":\"rgba(0,0,0,1)\",\"width\":3},\"marker\":{\"color\":\"rgba(0,0,0,1)\",\"line\":{\"color\":\"rgba(0,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,0,1)\"},\"error_y\":{\"color\":\"rgba(0,0,0,1)\"},\"error_x\":{\"color\":\"rgba(0,0,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[92.75,92.75,null,110,110],\"y\":[-1.365,-1.085,null,-1.365,-1.085],\"type\":\"scatter\",\"mode\":\"lines\",\"text\":[\"Q<sub>0.25<\\/sub>:92.75\",\"Q<sub>0.25<\\/sub>:92.75\",null,\"Q<sub>0.75<\\/sub>:110\",\"Q<sub>0.75<\\/sub>:110\"],\"hoverinfo\":[\"text\",\"text\",null,\"text\",\"text\"],\"name\":\"Quartiles\",\"legendgroup\":\"Quartiles\",\"showlegend\":true,\"line\":{\"color\":\"rgba(0,0,255,1)\",\"width\":2},\"marker\":{\"color\":\"rgba(0,0,255,1)\",\"line\":{\"color\":\"rgba(0,0,255,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,255,1)\"},\"error_y\":{\"color\":\"rgba(0,0,255,1)\"},\"error_x\":{\"color\":\"rgba(0,0,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[78.95,78.95,null,123.05,123.05],\"y\":[-1.337,-1.113,null,-1.337,-1.113],\"type\":\"scatter\",\"mode\":\"lines\",\"text\":[\"Q<sub>0.05<\\/sub>:78.95\",\"Q<sub>0.05<\\/sub>:78.95\",null,\"Q<sub>0.95<\\/sub>:123.05\",\"Q<sub>0.95<\\/sub>:123.05\"],\"hoverinfo\":[\"text\",\"text\",null,\"text\",\"text\"],\"name\":\"0.05, 0.95<br>Quantiles\",\"legendgroup\":\"0.05, 0.95<br>Quantiles\",\"showlegend\":true,\"line\":{\"color\":\"rgba(255,0,0,1)\",\"width\":2},\"marker\":{\"color\":\"rgba(255,0,0,1)\",\"line\":{\"color\":\"rgba(255,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(255,0,0,1)\"},\"error_y\":{\"color\":\"rgba(255,0,0,1)\"},\"error_x\":{\"color\":\"rgba(255,0,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[78.95,92.75],\"y\":[-1.225,-1.225],\"type\":\"scatter\",\"mode\":\"lines\",\"hoverinfo\":[\"none\",\"none\"],\"showlegend\":false,\"legendgroup\":\"0.05, 0.95<br>Quantiles\",\"name\":\"ignored\",\"marker\":{\"color\":\"rgba(255,0,0,0.3)\",\"line\":{\"color\":\"rgba(255,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(255,0,0,0.3)\"},\"error_y\":{\"color\":\"rgba(255,0,0,0.3)\"},\"error_x\":{\"color\":\"rgba(255,0,0,0.3)\"},\"line\":{\"color\":\"rgba(255,0,0,0.3)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[92.75,110],\"y\":[-1.225,-1.225],\"type\":\"scatter\",\"mode\":\"lines\",\"hoverinfo\":[\"none\",\"none\"],\"showlegend\":false,\"legendgroup\":\"Quartiles\",\"name\":\"ignored\",\"marker\":{\"color\":\"rgba(0,0,255,0.3)\",\"line\":{\"color\":\"rgba(0,0,255,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,255,0.3)\"},\"error_y\":{\"color\":\"rgba(0,0,255,0.3)\"},\"error_x\":{\"color\":\"rgba(0,0,255,0.3)\"},\"line\":{\"color\":\"rgba(0,0,255,0.3)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[110,123.05],\"y\":[-1.225,-1.225],\"type\":\"scatter\",\"mode\":\"lines\",\"hoverinfo\":[\"none\",\"none\"],\"showlegend\":false,\"legendgroup\":\"0.05, 0.95<br>Quantiles\",\"name\":\"ignored\",\"marker\":{\"color\":\"rgba(255,0,0,0.3)\",\"line\":{\"color\":\"rgba(255,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(255,0,0,0.3)\"},\"error_y\":{\"color\":\"rgba(255,0,0,0.3)\"},\"error_x\":{\"color\":\"rgba(255,0,0,0.3)\"},\"line\":{\"color\":\"rgba(255,0,0,0.3)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[67,82.2486868686869],\"y\":[-1.19,-1.19],\"type\":\"scatter\",\"mode\":\"lines\",\"text\":[\"Gini mean difference:15.249\",\"Gini mean difference:15.249\"],\"hoverinfo\":[\"text\",\"text\"],\"name\":\"Gini <span style=\\\"text-decoration: overline\\\">|Δ|<\\/span>\",\"legendgroup\":\"Gini <span style=\\\"text-decoration: overline\\\">|Δ|<\\/span>\",\"visible\":\"legendonly\",\"showlegend\":true,\"marker\":{\"color\":\"rgba(211,211,211,1)\",\"line\":{\"color\":\"rgba(211,211,211,1)\"}},\"textfont\":{\"color\":\"rgba(211,211,211,1)\"},\"error_y\":{\"color\":\"rgba(211,211,211,1)\"},\"error_x\":{\"color\":\"rgba(211,211,211,1)\"},\"line\":{\"color\":\"rgba(211,211,211,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n:::\n\n```{.r .cell-code}\n# or try makecnote(`makecnote example` ~ kabl(table(x)) + hist(x) + ...\n# Avoid raw by using kabl(table(x)) instead of table(x)\n```\n\n\nAdding `+ raw` to a formula in `makecnote`, `makecolmarg`, or `maketabs` forces printed results to be treated as raw verbatim R output.\n\n`makecallout` is a general `Quarto` callout maker that implements different combinations of the following: `list` or formula, `print` or run code, defer executing and only produce the code to execute vs. running the code now, and close the callout or leave it open for more calls.\n\n`reptools` also has helper functions for interactively accessing information to help in report and analysis building:\n\n| Function  | Purpose |\n|-----------|--------|\n|`htmlView`|view html-converted objects in `RStudio` `View` pane|\n|`htmlViewx`|view html-converted objects in external browser|\n\n\n## Multi-Output Format Reports\n\nTo allow one report to be used to render multiple output formats, especially html and pdf, it is helpful to be able to sense which output format is currently in play, and to use different functions or options to render output explicitly for the current format.  Here is how to create variables that can be referenced simply in code throughout the report, and to invoke the `plotly` graphics package if output is in html to allow interactivity.  A small function `ggp` is defined so that if you run any `ggplot2` output through it, the result will be automatically converted to `plotly` using the `ggplotly` function, otherwise it is left at standard static `ggplot2` output if html is not the output target.[See [this](https://hbiostat.org/ordinal) for examples of articles rendered in both html and PDF from the same script.]{.aside}\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutfmt <- if(knitr::is_html_output ()) 'html'  else 'pdf'\nmarkup <- if(knitr::is_latex_output()) 'latex' else 'html'\nishtml <- outfmt == 'html'\nif(ishtml) require(plotly)\nggp <- if(ishtml) ggplotlyr else function(ggobject, ...) ggobject\n# See below for more about ggplotlyr (a front end for ggplotly that can\n# correct a formatting issue with hover text)\n```\n:::\n\n\n`Quarto` has a excellent facility for [conditionally including document sections](https://quarto.org/docs/authoring/conditional.html) depending on the currently chosen output format.\n\n::: {.callout-note collapse=\"true\"}\n## Special Considerations For $\\LaTeX$/PDF\n\nThe `Hmisc`, `rms`, and `rmsb` packages have a good deal of support for creating $\\LaTeX$ output in addition to html.  They require some special $\\LaTeX$ packages to be accessed.  In addition, if using any of `Quarto`'s nice features for making marginal notes, there is another $\\LaTeX$ package to attach.  Below you'll find what needs to be added to the `yaml` prologue at the top of your script if using `Quarto`.  You have to modify `pdf-engine` to suit your needs.  I use `luatex` because it handles special unicode characters.  In the future (approximately July 2022) a bug in `Pandoc` will be fixed and you can put `links-as-notes: true` in the `yaml` header instead of redefining `href` and linking in `hyperref`.\n\n```\nformat:\n  html:\n    self-contained: true\n    . . .\n  pdf:\n    pdf-engine: lualatex\n    toc: false\n    number-sections: true\n    number-depth: 2\n    top-level-division: section\n    reference-location: document\n    listings: false\n    header-includes:\n      \\usepackage{marginnote, here, relsize, needspace, setspace, hyperref}\n      \\renewcommand{\\href}[2]{#2\\footnote{\\url{#1}}}\n```\n\nThe `href` redefinition above turns URLs into footnotes if running $\\LaTeX$.\n\nThere is one output element provided by `Quarto` that will not render correctly to $\\LaTeX$: a marginal note using the markup `.column-margin`.  To automatically use an alternate in-body format, define a function that can be used for both typesetting formats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmNote <- if(ishtml) '.column-margin'\n  else\n                    '.callout-note appearance=\"minimal\"'\n```\n:::\n\n\nThen use <tt>r mNote</tt> enclosed in back ticks in place of the `.column-margin` callout for generality.\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Saving Graphics Images\n\nEven when producing only html, one may wish to save individual graphics for manuscript writing.  For non-interactive graphics you can right click on the image and download the `.png` file.  For interactive plots, `plotly` shows a \"take a snapshot\" icon when you hover over the image.  Clicking this icon will produce a static `.png` snapshot of the graph.  Some graphs are not appropriate for static documents, and the variables created in the code above can be checked so that, for example, an alternative graph can be produced when making a `.pdf` file.  But in other cases one just produces an additional static plot that is not shown in the html report.  See the margin note near @fig-survplotp for an example.\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Using `Hmisc` Formatting for Variable Labels in Tables\n\nAs done with various `Hmisc` and `rms` package functions, one can capitalize on `Hmisc`'s special formatting of variable labels and units when constructing tables in $\\LaTeX$ or html.  The basic constructs are shown in the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve a set of markup functions depending on typesetting format\n# See below for definition of ishtml\nspecs    <- markupSpecs[[if(ishtml) 'html' else 'latex']]\n# Hmisc markupSpecs functions create plain text, html, latex,\n# markdown, or plotmath code\nvarlabel <- specs$varlabel  # retrieve an individual function\n# Format text describing variable named x\n# hfill=TRUE typesets units to be right-justified in label\n# Use the following character string as a row label\n# Default specifies the string to use if there is not label\n# (usually taken as the variable name)\nvarlabel(label(x, default='x'), units(x), hfill=TRUE)\n```\n:::\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Using Tooltips with `Mermaid`\n\nAs exemplified in @sec-doverview, `Mermaid` provides an easy way to make many types of diagrams.  Diagrams are more valuable when they are dynamic.  `Mermaid` provides an easy way to include pop-up tooltips in diagram nodes, to provide deeper information about the node.  When the tooltips contain tables whose columns need to line up, you need to put the following in your document so that tooltips will used a fixed-width font and preserve white space.  The best way to include this is to put it in a `.css` file that is reference in the report's `yaml`, or to surround the four lines with `<style>` ... `</style>`.\n\n| mermaidTooltip {\n|       font-family: courier;\n|       white-space: pre;\n| }\n\n:::\n\n## HTML Tables {#sec-rformat-html}\n\nNicely formatted tables can be created in multiple ways:\n\n* using customized code that directly writes html markup\n* using customized code that directly writes $\\LaTeX$ markup\n* using customized code that writes markdown markup (e.g., \"pipe\" tables)\n* hand coding markdown (usually pipe tables)\n\nThe latter two provide less flexibility but have the advantage of being automatically converted to html or $\\LaTeX$ depending on your destination format.\n\nHere is an example of a hand coded markdown pipe table.  Note (1) the second line of the markup indicates that the first column is to be left-justified and the second column right-justified, and (2) you can include computed values from R expressions.\n\n| | This Column | That Column |\n| |:-----|-----:|\n| | cat | dog |\n| | \\`r pi\\` | \\`r 2+3\\` |\n| : Table caption\n\nThe result is\n\n| This Column | That Column |\n|:-----|-----:|\n| cat | dog |\n| 3.1415927 | 5 |\n: Table caption\n\nThere is an automatic feature of html that makes it especially attractive as a destination format: If a cell contains a long string of characters, those strings will be line-wrapped appropriately, with the line length depending on the width of the display device.\n\nThe `knitr` package `kable` function provides an easy way to produce html tables from data tables/frames and matrices, and `knitr::kables` allows one to put several tables together.  The `reptools` repository `kabl` function combines the features of `kable` and `kables`.  The [`kableExtra`](https://cran.r-project.org/web/packages/kableExtra/index.html) package allows you to greatly extend what `kable` can do.\n\nThere are many R packages and functions for making advanced html tables.  See for example the `Table 1` tab in @sec-descript.  This table was produced by the `Hmisc` package `summaryM` function, which used the `htmlTable` function in the [`htmlTable`](https://cran.r-project.org/web/packages/htmlTable) package.  Other packages to consider are [`tangram`](https://cran.r-project.org/web/packages/tangram) and packages discussed [here](https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r).",
    "supporting": [
      "rformat_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.0/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.5.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.5.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}